/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: mvptree_go.i

package mvptree

/*
#define intgo swig_intgo
typedef void *swig_voidp;

#include <stdint.h>


typedef int intgo;
typedef unsigned int uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;


typedef _gostring_ swig_type_1;
typedef _gostring_ swig_type_2;
extern void _wrap_Swig_free_mvptree_b0de9fb17f3d01b8(uintptr_t arg1);
extern uintptr_t _wrap_Swig_malloc_mvptree_b0de9fb17f3d01b8(swig_intgo arg1);
extern uintptr_t _wrap_new_MVPTreeWrap_mvptree_b0de9fb17f3d01b8(swig_type_1 arg1, swig_intgo arg2, swig_intgo arg3, swig_intgo arg4);
extern swig_intgo _wrap_MVPTreeWrap_init_mvptree_b0de9fb17f3d01b8(uintptr_t arg1);
extern swig_intgo _wrap_MVPTreeWrap_add_mvptree_b0de9fb17f3d01b8(uintptr_t arg1, swig_type_2 arg2, uintptr_t arg3);
extern uintptr_t _wrap_MVPTreeWrap_query_mvptree_b0de9fb17f3d01b8(uintptr_t arg1, uintptr_t arg2, swig_intgo arg3, float arg4, swig_voidp arg5);
extern swig_intgo _wrap_MVPTreeWrap_save_mvptree_b0de9fb17f3d01b8(uintptr_t arg1);
extern void _wrap_delete_MVPTreeWrap_mvptree_b0de9fb17f3d01b8(uintptr_t arg1);
extern float _wrap_HammingDistanceComp_mvptree_b0de9fb17f3d01b8(uintptr_t arg1, uintptr_t arg2);
#undef intgo
*/
import "C"

import "unsafe"
import _ "runtime/cgo"
import "sync"


type _ unsafe.Pointer



var Swig_escape_always_false bool
var Swig_escape_val interface{}


type _swig_fnptr *byte
type _swig_memberptr *byte


type _ sync.Mutex

func Swig_free(arg1 uintptr) {
	_swig_i_0 := arg1
	C._wrap_Swig_free_mvptree_b0de9fb17f3d01b8(C.uintptr_t(_swig_i_0))
}

func Swig_malloc(arg1 int) (_swig_ret uintptr) {
	var swig_r uintptr
	_swig_i_0 := arg1
	swig_r = (uintptr)(C._wrap_Swig_malloc_mvptree_b0de9fb17f3d01b8(C.swig_intgo(_swig_i_0)))
	return swig_r
}

type SwigcptrMVPTreeWrap uintptr

func (p SwigcptrMVPTreeWrap) Swigcptr() uintptr {
	return (uintptr)(p)
}

func (p SwigcptrMVPTreeWrap) SwigIsMVPTreeWrap() {
}

func NewMVPTreeWrap(arg1 string, arg2 int, arg3 int, arg4 int) (_swig_ret MVPTreeWrap) {
	var swig_r MVPTreeWrap
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	swig_r = (MVPTreeWrap)(SwigcptrMVPTreeWrap(C._wrap_new_MVPTreeWrap_mvptree_b0de9fb17f3d01b8(*(*C.swig_type_1)(unsafe.Pointer(&_swig_i_0)), C.swig_intgo(_swig_i_1), C.swig_intgo(_swig_i_2), C.swig_intgo(_swig_i_3))))
	if Swig_escape_always_false {
		Swig_escape_val = arg1
	}
	return swig_r
}

func (arg1 SwigcptrMVPTreeWrap) Init() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_MVPTreeWrap_init_mvptree_b0de9fb17f3d01b8(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func (arg1 SwigcptrMVPTreeWrap) Add(arg2 string, arg3 Uint64_t) (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	_swig_i_1 := arg2
	_swig_i_2 := arg3.Swigcptr()
	swig_r = (int)(C._wrap_MVPTreeWrap_add_mvptree_b0de9fb17f3d01b8(C.uintptr_t(_swig_i_0), *(*C.swig_type_2)(unsafe.Pointer(&_swig_i_1)), C.uintptr_t(_swig_i_2)))
	if Swig_escape_always_false {
		Swig_escape_val = arg2
	}
	return swig_r
}

func (arg1 SwigcptrMVPTreeWrap) Query(arg2 Uint64_t, arg3 int, arg4 float32, arg5 *int) (_swig_ret Std_vector_Sl_std_string_Sg_) {
	var swig_r Std_vector_Sl_std_string_Sg_
	_swig_i_0 := arg1
	_swig_i_1 := arg2.Swigcptr()
	_swig_i_2 := arg3
	_swig_i_3 := arg4
	_swig_i_4 := arg5
	swig_r = (Std_vector_Sl_std_string_Sg_)(SwigcptrStd_vector_Sl_std_string_Sg_(C._wrap_MVPTreeWrap_query_mvptree_b0de9fb17f3d01b8(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1), C.swig_intgo(_swig_i_2), C.float(_swig_i_3), C.swig_voidp(_swig_i_4))))
	return swig_r
}

func (arg1 SwigcptrMVPTreeWrap) Save() (_swig_ret int) {
	var swig_r int
	_swig_i_0 := arg1
	swig_r = (int)(C._wrap_MVPTreeWrap_save_mvptree_b0de9fb17f3d01b8(C.uintptr_t(_swig_i_0)))
	return swig_r
}

func DeleteMVPTreeWrap(arg1 MVPTreeWrap) {
	_swig_i_0 := arg1.Swigcptr()
	C._wrap_delete_MVPTreeWrap_mvptree_b0de9fb17f3d01b8(C.uintptr_t(_swig_i_0))
}

type MVPTreeWrap interface {
	Swigcptr() uintptr
	SwigIsMVPTreeWrap()
	Init() (_swig_ret int)
	Add(arg2 string, arg3 Uint64_t) (_swig_ret int)
	Query(arg2 Uint64_t, arg3 int, arg4 float32, arg5 *int) (_swig_ret Std_vector_Sl_std_string_Sg_)
	Save() (_swig_ret int)
}

func HammingDistanceComp(arg1 MVPDP, arg2 MVPDP) (_swig_ret float32) {
	var swig_r float32
	_swig_i_0 := arg1.Swigcptr()
	_swig_i_1 := arg2.Swigcptr()
	swig_r = (float32)(C._wrap_HammingDistanceComp_mvptree_b0de9fb17f3d01b8(C.uintptr_t(_swig_i_0), C.uintptr_t(_swig_i_1)))
	return swig_r
}


type SwigcptrMVPDP uintptr
type MVPDP interface {
	Swigcptr() uintptr;
}
func (p SwigcptrMVPDP) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrUint64_t uintptr
type Uint64_t interface {
	Swigcptr() uintptr;
}
func (p SwigcptrUint64_t) Swigcptr() uintptr {
	return uintptr(p)
}

type SwigcptrStd_vector_Sl_std_string_Sg_ uintptr
type Std_vector_Sl_std_string_Sg_ interface {
	Swigcptr() uintptr;
}
func (p SwigcptrStd_vector_Sl_std_string_Sg_) Swigcptr() uintptr {
	return uintptr(p)
}

